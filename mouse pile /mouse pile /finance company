import torch
import torch.nn as nn

class DQN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(DQN, self).__init__()
        self.linear1 = nn.Linear(input_size, hidden_size)
        self.linear2 = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        x = torch.relu(self.linear1(x))
        return self.linear2(x)

class DDQN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(DDQN, self).__init__()
        self.linear1 = nn.Linear(input_size, hidden_size)
        self.linear2 = nn.Linear(hidden_size, hidden_size)
        self.linear3 = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        x = torch.relu(self.linear1(x))
        x = torch.relu(self.linear2(x))
        return self.linear3(x)

# Usage
input_size = 4
hidden_size = 16
output_size = 2

dqn = DQN(input_size, hidden_size, output_size)
ddqn = DDQN(input_size, hidden_size, output_size)

x = torch.randn(8, 4)
dqn_out = dqn(x)
ddqn_out = ddqn(x)

print(dqn_out.shape) # torch.Size([8, 2])
print(ddqn_out.shape) # torch.Size([8, 2])
